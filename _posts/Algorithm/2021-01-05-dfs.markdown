---  
layout: post  
title:  "탐색 알고리즘 DFS"  
date:   2021-01-05 21:26:00  
category: Github
---  
 아래 내용은 나동빈 저자의 <이것이 코딩 테스트다> 라는 책을 참고한 것입니다. 
https://github.com/ndb796/python-for-coding-test
 
1. DFS란?
2. DFS 구현하기


## 1. DFS 란?
DFS(Depth-First Search, 깊이 우선 탐색)는 자식 노드를 우선적으로 탐색하는 기법이다. 
\
<img src="https://i.ibb.co/6DJ0zFW/node.png" alt="node" border="0" width = "200" class = "center">

이러한 그래프를 크게 두 가지 방법으로 표현할 수 있는데
1. 인접 행렬(Adjacency Matrix): 2차원 배열로 그래프의 연결 관계를 표현하는 방식
- INF는 Infinity를 뜻하는 것으로, '무한' 즉 연결되어 있지 않아 비용이 무한이라는 것을 나타냄

 |  	| 0 	| 1 	| 2 	|
|:-:	|:-: 	|:-:	|:-:	|
| 0 	| 0 	| 7 	| 5 	|
| 1 	| 7 	| 0 	| INF 	|
| 2 	| 5 	| INF 	| 0 	|


- 인접행렬 방식 예제

```python
INF = 9999999999 #무한

graph = [
	[0,7,5],
	[7,0,INF],
	[5,INF,0]
]

print(graph)
```

2. 인접 리스트(Adjacency List): 리스트로 그래프의 연결 관계를 표현하는 방식
- 모든 노드에 대한 정보를 차례대로 연결하여 저장한다.

<img src="https://i.ibb.co/55H399S/adjacency-list.png" alt="adjacency-list" border="0" width = "500" class = "center">

- 인접 리스트 방식 예제

```python
#Row가 3인 2차원 리스트로 인접 리스트 표현
graph = [[] for _ in range(3)]

graph[0].append((1,7))
graph[0].append((2,5))

graph[1].append((0,7))

graph[2].append((0,5))

print(graph)
```

### 🎈 두 방식은 어떤 차이가 있을까?
- 인접 행렬 방식
	- 모든 관계를 저장하므로 노드 개수가 많을수록 메모리가 불필요하게 낭비
	- 연결되어 있지 않은 노드도 굳이 '무한'이라고 표현해 주어야 하기 때문
- 인접 리스트 방식
	- 메모리를 효율적으로 사용
	- But, 특정한 두 노드가 연결되어 있는지 확인하는 속도가 느림
		- 연결되어 있는 노드를 모두 탐색해 봐야 하기 때문

	📌 특정한 노드와 연결된 모든 인접 노드를 순회해야 하는 경우, 인접 리스트 방식이 효율적

## 2. DFS 구현하기
<img src="https://i.ibb.co/5LnXdNm/graph.png" alt="graph" width="50" >


위와 같은 그래프가 있다. 책에도 이렇게 귀엽게 굴곡진 그래프로 표현해주셔서 나도 한 번 따라해 봤다. 

DFS는 **스택** 자료구조를 이용하여 최대한 깊이 방문했다가 돌아와서 다른 경로를 탐색하는 방식이다.

1. 탐색 시작 노드를 스택에 삽입하고 **방문 처리**를 한다.
	- 방문 처리란 문제마다 다른데 따로 그래프와 같은 행렬을 만들거나, 그래프를 직접 바꾼다. 예를 들어, 0만 탐색해야 하는 graph에서 탐색한 0을 1로 바꿔준다.
2. 스택의 최상단 노드에 **방문하지 않은 인접 노드**가 있으면 그 인접 노드를 스택에 넣고 방문 처리를 한다. 방문하지 않은 인접 노드가 없으면 스택에서 **최상단 노드를 꺼낸다**.
3. 2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다.
	- 이 과정에서 재귀함수가 많이 쓰인다.

- DFS 예제

```python
def dfs(graph, v, visited): # v = 현재 노드
	visited[v] = True
	print(v, end = '')
	
	for i in graph[v]: # 현재 노드와 연결된 노드에 대해
		if not visited[i]: # 아직 방문한 노드가 아니면
			dfs(graph, i, visited)
		
#각 노드와 연결되어 있는 노드를 표현
#편의 상 첫번째는 비우고 1부터 인덱싱을 시작함
graph = [
	[],
	[2,3,8],
	[1,7],
	[1,4,5],
	[3,5],
	[3,4],
	[7],
	[2,6,8],
	[1,7]
]

# 방문 여부 저장 리스트
visited = [False} * 9

# 1번노드를 시작으로 dfs를 진행함
dfs(graph, 1, visited)
```
